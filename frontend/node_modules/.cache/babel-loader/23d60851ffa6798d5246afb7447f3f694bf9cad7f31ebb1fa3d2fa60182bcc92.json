{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request logging\napi.interceptors.request.use(request => {\n  var _request$method;\n  console.log('[API REQUEST]', (_request$method = request.method) === null || _request$method === void 0 ? void 0 : _request$method.toUpperCase(), request.url, request.data || '');\n  return request;\n});\n\n// Add response logging\napi.interceptors.response.use(response => {\n  console.log('[API RESPONSE]', response.config.url, response.data);\n  return response;\n}, error => {\n  var _error$config, _error$response;\n  console.error('[API ERROR]', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const dilemmaApi = {\n  generate: async (domain = 'general') => {\n    const response = await api.post('/dilemmas/generate', {\n      domain\n    });\n    return response.data;\n  },\n  analyze: async (dilemma, framework) => {\n    const response = await api.post('/dilemmas/analyze', {\n      dilemma,\n      framework\n    });\n    return response.data;\n  },\n  compare: async (dilemma, frameworks) => {\n    const response = await api.post('/dilemmas/compare', {\n      dilemma,\n      frameworks\n    });\n    return response.data;\n  }\n};\nexport const caseApi = {\n  getHistorical: async () => {\n    const response = await api.get('/cases/historical');\n    return response.data;\n  }\n};\nexport const feedbackApi = {\n  submit: async feedback => {\n    const response = await api.post('/feedback', feedback);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","_request$method","console","log","method","toUpperCase","url","data","response","config","error","_error$config","_error$response","message","Promise","reject","dilemmaApi","generate","domain","post","analyze","dilemma","framework","compare","frameworks","caseApi","getHistorical","get","feedbackApi","submit","feedback"],"sources":["/home/chirag/Documents/Projects/DevifyX/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Dilemma, Analysis, ComparisonResult, HistoricalCase, Feedback, EthicalFramework } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request logging\napi.interceptors.request.use(request => {\n  console.log('[API REQUEST]', request.method?.toUpperCase(), request.url, request.data || '');\n  return request;\n});\n\n// Add response logging\napi.interceptors.response.use(response => {\n  console.log('[API RESPONSE]', response.config.url, response.data);\n  return response;\n}, error => {\n  console.error('[API ERROR]', error.config?.url, error.response?.data || error.message);\n  return Promise.reject(error);\n});\n\nexport const dilemmaApi = {\n  generate: async (domain: string = 'general'): Promise<Dilemma> => {\n    const response = await api.post('/dilemmas/generate', { domain });\n    return response.data;\n  },\n\n  analyze: async (dilemma: string, framework: EthicalFramework): Promise<Analysis> => {\n    const response = await api.post('/dilemmas/analyze', { dilemma, framework });\n    return response.data;\n  },\n\n  compare: async (dilemma: string, frameworks?: EthicalFramework[]): Promise<ComparisonResult> => {\n    const response = await api.post('/dilemmas/compare', { dilemma, frameworks });\n    return response.data;\n  },\n};\n\nexport const caseApi = {\n  getHistorical: async (): Promise<HistoricalCase> => {\n    const response = await api.get('/cases/historical');\n    return response.data;\n  },\n};\n\nexport const feedbackApi = {\n  submit: async (feedback: Feedback): Promise<{ success: boolean; message: string }> => {\n    const response = await api.post('/feedback', feedback);\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACD,OAAO,IAAI;EAAA,IAAAE,eAAA;EACtCC,OAAO,CAACC,GAAG,CAAC,eAAe,GAAAF,eAAA,GAAEF,OAAO,CAACK,MAAM,cAAAH,eAAA,uBAAdA,eAAA,CAAgBI,WAAW,CAAC,CAAC,EAAEN,OAAO,CAACO,GAAG,EAAEP,OAAO,CAACQ,IAAI,IAAI,EAAE,CAAC;EAC5F,OAAOR,OAAO;AAChB,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAACQ,QAAQ,IAAI;EACxCN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,QAAQ,CAACC,MAAM,CAACH,GAAG,EAAEE,QAAQ,CAACD,IAAI,CAAC;EACjE,OAAOC,QAAQ;AACjB,CAAC,EAAEE,KAAK,IAAI;EAAA,IAAAC,aAAA,EAAAC,eAAA;EACVV,OAAO,CAACQ,KAAK,CAAC,aAAa,GAAAC,aAAA,GAAED,KAAK,CAACD,MAAM,cAAAE,aAAA,uBAAZA,aAAA,CAAcL,GAAG,EAAE,EAAAM,eAAA,GAAAF,KAAK,CAACF,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBL,IAAI,KAAIG,KAAK,CAACG,OAAO,CAAC;EACtF,OAAOC,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMM,UAAU,GAAG;EACxBC,QAAQ,EAAE,MAAAA,CAAOC,MAAc,GAAG,SAAS,KAAuB;IAChE,MAAMV,QAAQ,GAAG,MAAMd,GAAG,CAACyB,IAAI,CAAC,oBAAoB,EAAE;MAAED;IAAO,CAAC,CAAC;IACjE,OAAOV,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDa,OAAO,EAAE,MAAAA,CAAOC,OAAe,EAAEC,SAA2B,KAAwB;IAClF,MAAMd,QAAQ,GAAG,MAAMd,GAAG,CAACyB,IAAI,CAAC,mBAAmB,EAAE;MAAEE,OAAO;MAAEC;IAAU,CAAC,CAAC;IAC5E,OAAOd,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDgB,OAAO,EAAE,MAAAA,CAAOF,OAAe,EAAEG,UAA+B,KAAgC;IAC9F,MAAMhB,QAAQ,GAAG,MAAMd,GAAG,CAACyB,IAAI,CAAC,mBAAmB,EAAE;MAAEE,OAAO;MAAEG;IAAW,CAAC,CAAC;IAC7E,OAAOhB,QAAQ,CAACD,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMkB,OAAO,GAAG;EACrBC,aAAa,EAAE,MAAAA,CAAA,KAAqC;IAClD,MAAMlB,QAAQ,GAAG,MAAMd,GAAG,CAACiC,GAAG,CAAC,mBAAmB,CAAC;IACnD,OAAOnB,QAAQ,CAACD,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMqB,WAAW,GAAG;EACzBC,MAAM,EAAE,MAAOC,QAAkB,IAAqD;IACpF,MAAMtB,QAAQ,GAAG,MAAMd,GAAG,CAACyB,IAAI,CAAC,WAAW,EAAEW,QAAQ,CAAC;IACtD,OAAOtB,QAAQ,CAACD,IAAI;EACtB;AACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}