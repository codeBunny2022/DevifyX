{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const dilemmaApi = {\n  generate: async (domain = 'general') => {\n    const response = await api.post('/dilemmas/generate', {\n      domain\n    });\n    return response.data;\n  },\n  analyze: async (dilemma, framework) => {\n    const response = await api.post('/dilemmas/analyze', {\n      dilemma,\n      framework\n    });\n    return response.data;\n  },\n  compare: async (dilemma, frameworks) => {\n    const response = await api.post('/dilemmas/compare', {\n      dilemma,\n      frameworks\n    });\n    return response.data;\n  }\n};\nexport const caseApi = {\n  getHistorical: async () => {\n    const response = await api.get('/cases/historical');\n    return response.data;\n  }\n};\nexport const feedbackApi = {\n  submit: async feedback => {\n    const response = await api.post('/feedback', feedback);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","dilemmaApi","generate","domain","response","post","data","analyze","dilemma","framework","compare","frameworks","caseApi","getHistorical","get","feedbackApi","submit","feedback"],"sources":["/home/chirag/Documents/Projects/DevifyX/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Dilemma, Analysis, ComparisonResult, HistoricalCase, Feedback, EthicalFramework } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const dilemmaApi = {\n  generate: async (domain: string = 'general'): Promise<Dilemma> => {\n    const response = await api.post('/dilemmas/generate', { domain });\n    return response.data;\n  },\n\n  analyze: async (dilemma: string, framework: EthicalFramework): Promise<Analysis> => {\n    const response = await api.post('/dilemmas/analyze', { dilemma, framework });\n    return response.data;\n  },\n\n  compare: async (dilemma: string, frameworks?: EthicalFramework[]): Promise<ComparisonResult> => {\n    const response = await api.post('/dilemmas/compare', { dilemma, frameworks });\n    return response.data;\n  },\n};\n\nexport const caseApi = {\n  getHistorical: async (): Promise<HistoricalCase> => {\n    const response = await api.get('/cases/historical');\n    return response.data;\n  },\n};\n\nexport const feedbackApi = {\n  submit: async (feedback: Feedback): Promise<{ success: boolean; message: string }> => {\n    const response = await api.post('/feedback', feedback);\n    return response.data;\n  },\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG;EACxBC,QAAQ,EAAE,MAAAA,CAAOC,MAAc,GAAG,SAAS,KAAuB;IAChE,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,oBAAoB,EAAE;MAAEF;IAAO,CAAC,CAAC;IACjE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,OAAO,EAAE,MAAAA,CAAOC,OAAe,EAAEC,SAA2B,KAAwB;IAClF,MAAML,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,mBAAmB,EAAE;MAAEG,OAAO;MAAEC;IAAU,CAAC,CAAC;IAC5E,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDI,OAAO,EAAE,MAAAA,CAAOF,OAAe,EAAEG,UAA+B,KAAgC;IAC9F,MAAMP,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,mBAAmB,EAAE;MAAEG,OAAO;MAAEG;IAAW,CAAC,CAAC;IAC7E,OAAOP,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMM,OAAO,GAAG;EACrBC,aAAa,EAAE,MAAAA,CAAA,KAAqC;IAClD,MAAMT,QAAQ,GAAG,MAAMP,GAAG,CAACiB,GAAG,CAAC,mBAAmB,CAAC;IACnD,OAAOV,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAG;EACzBC,MAAM,EAAE,MAAOC,QAAkB,IAAqD;IACpF,MAAMb,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,WAAW,EAAEY,QAAQ,CAAC;IACtD,OAAOb,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}